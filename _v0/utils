# shellcheck shell=sh disable=SC3043

eval_echo(){
    echo "$@" >&2
    eval "$@"
}

ali_region(){
    if [ -t 1 ]; then
        aliyun ecs DescribeRegions | jq .Regions.Region | ali_table_json .LocalName .RegionEndpoint .RegionId
    else
        aliyun ecs DescribeRegions | jq .Regions.Region
    fi
}

ali_zone(){
    if [ -t 1 ]; then
        # aliyun ecs DescribeZones | jq '.Zones.Zone[] | { LocalName: .LocalName, ZoneId: .ZoneId }' | jq -s .
        aliyun ecs DescribeZones | jq '.Zones.Zone[] | { LocalName: .LocalName, ZoneId: .ZoneId }' | jq -s . | ali_table_json .LocalName .ZoneId
    else
        aliyun ecs DescribeZones | jq .Zones.Zone
    fi
}


xrc ui

ali_table_json(){
    local arg
    local args
    local title
    for arg in "$@"; do
        case "$arg" in
            .*)     args="$args,$arg"      
                    title="$title ${arg#.}"      
                    ;;
            *=.*)   args="$args,${arg#*=}"
                    title="$title ${arg%%=.*}"
                    ;;
            *)      printf "%s" "Argument Wrong." >&2
        esac
    done
    args="${args#,}"

    local line
    ui table -
    IFS="
"
    eval ui table + "$title"
    for line in $(jq -r ".[] | [ $args ] | map( . | @json) | join(\" \") "); do
        eval ui table + "$line"
    done
    ui table out 6
}

ali_instance(){
    param <<A
options:
    --mem       "Memory"        <size>=""
    --cpu       "CPU"           <core>=""
    --gpu       "GPU"           <gpu>=0
A

    {
        aliyun ecs DescribeInstanceTypes | jq .InstanceTypes.InstanceType[] | jq '
            def fun: if . == null then "" else . end;
            . |= . + { credit: .InitialCredit | fun }
        '
    } | {
        if [ -z "$mem" ]; then          cat
        else                            jq "if .MemorySize==$mem  then .   else empty end";       fi
    } | {
        if  [ -z "$cpu" ];   then       cat
        else                            jq "if .CpuCoreCount==$cpu  then .  else empty end";     fi
    } | {
        if  [ -z "$gpu" ];   then       cat
        else                            jq "if .GPUAmount==$gpu     then .  else empty end";     fi
    } | jq -s . | {
        if [ -t 1 ]; then
            ali_table_json id=.InstanceTypeId cpu=.CpuCoreCount disk=.DiskQuantity mem=.MemorySize gpu=.GPUAmount .credit
        else
            cat
        fi
    }

}


ali_exactor(){
    local code="${1:?Provide code}"
    local msg0="${2:?Provide msg0}"
    local msgn="${3:?Provide msgn}"
    shift 3

    local ret
    ret="$("$code" "$@")"
    local len
    len="$(printf "%s" "$ret" | jq '. | length')"

    case "$len" in
        0)  ali_log warn "$msg0";;
        1)  printf "%s" "$ret";;
        *)  ali_log warn "$msgn";;
    esac
}

ali_exactor_declare(){
    local func="${1:?Provide funname}"
    local msg0="${2:?Provide msg0}"
    local msgn="${3:?Provide msgn}"
    local id_eval="${4:?Provide id eval}"
    eval "${func}_exact(){
        ali_exactor ${func}_ls \"$msg0\" \"$msgn\" \"\$@\"
    }
    
    ${func}_exactid(){
        ${func}_exact \"\$@\" | jq -r '.[0].$id_eval'
    }
    "
}

