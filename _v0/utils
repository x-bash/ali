# shellcheck shell=sh disable=SC3043

eval_echo(){
    echo "$@" >&2
    eval "$@"
}

ali_region(){
    if [ -t 1 ]; then
        aliyun ecs DescribeRegions | jq .Regions.Region | ali_table_json .LocalName .RegionEndpoint .RegionId
    else
        aliyun ecs DescribeRegions | jq .Regions.Region
    fi
}

ali_zone(){
    if [ -t 1 ]; then
        # aliyun ecs DescribeZones | jq '.Zones.Zone[] | { LocalName: .LocalName, ZoneId: .ZoneId }' | jq -s .
        aliyun ecs DescribeZones | jq '.Zones.Zone[] | { LocalName: .LocalName, ZoneId: .ZoneId }' | jq -s . | ali_table_json .LocalName .ZoneId
    else
        aliyun ecs DescribeZones | jq .Zones.Zone
    fi
}


xrc ui

ali_table_json(){
    local arg
    local args
    local title
    for arg in "$@"; do
        case "$arg" in
            .*)     args="$args,$arg"      
                    title="$title ${arg#.}"      
                    ;;
            *=.*)   args="$args,${arg#*=}"
                    title="$title ${arg%%=.*}"
                    ;;
            *)      printf "%s" "Argument Wrong." >&2
        esac
    done
    args="${args#,}"

    local line
    ui table -
    IFS="
"
    eval ui table + "$title"
    for line in $(jq -r ".[] | [ $args ] | map( . | @json) | join(\" \") "); do
        eval ui table + "$line"
    done
    ui table out 6
}

ali_instance(){
    param <<A
options:
    --mem       "Memory"        <size>=""
    --cpu       "CPU"           <core>=""
    --gpu       "GPU"           <gpu>=0
A

    {
        aliyun ecs DescribeInstanceTypes | jq .InstanceTypes.InstanceType[] | jq '
            def fun: if . == null then "" else . end;
            . |= . + { credit: .InitialCredit | fun }
        '
    } | {
        if [ -z "$mem" ]; then          cat
        else                            jq "if .MemorySize==$mem  then .   else empty end";       fi
    } | {
        if  [ -z "$cpu" ];   then       cat
        else                            jq "if .CpuCoreCount==$cpu  then .  else empty end";     fi
    } | {
        if  [ -z "$gpu" ];   then       cat
        else                            jq "if .GPUAmount==$gpu     then .  else empty end";     fi
    } | jq -s . | {
        if [ -t 1 ]; then
            ali_table_json id=.InstanceTypeId cpu=.CpuCoreCount disk=.DiskQuantity mem=.MemorySize gpu=.GPUAmount .credit
        else
            cat
        fi
    }

}


ali_exactor(){
    local code="${1:?Provide code}"
    local msg0="${2:?Provide msg0}"
    local msgn="${3:?Provide msgn}"
    shift 3

    local ret
    ret="$("$code" "$@")"
    local len
    len="$(printf "%s" "$ret" | jq '. | length')"

    case "$len" in
        0)  ali_log warn "$msg0";;
        1)  printf "%s" "$ret";;
        *)  ali_log warn "$msgn";;
    esac
}

ali_exactor_declare(){
    local func="${1:?Provide funname}"
    local msg0="${2:?Provide msg0}"
    local msgn="${3:?Provide msgn}"
    local id_eval="${4:?Provide id eval}"
    eval "${func}_exact(){
        ali_exactor ${func}_ls \"$msg0\" \"$msgn\" \"\$@\"
    }
    
    ${func}_exactid(){
        ${func}_exact \"\$@\" | jq -r '.[0].$id_eval'
    }
    "
}


ali_quicker(){
    local func="${1:-ali_keypair}"
    local reload_function="$2"
    shift 2

    local kw="$1"

    if [ ! -t 1 ]; then
        "${func}_ls" ${kw+"$kw"}
        return
    fi 

    local interactive_command_help
    interactive_command_help="$(cat <<A

CLI COMMANDS:
    r               reload
    q               quit
    :               : <cmd> [ ... <args> ]
$(${func} help)
A
)"

    local s
    s="$(${func}_ls $kw)"
    printf "%s" "$s" | "${func}_ls_format"
    printf "%s\n" "$interactive_command_help"

    local line
    local title
    title=$(printf "\033[1;33m%s\033[0m" "${func} > " | tr '_' ' ')
    while printf "%s" "$title" && ali_read line; do
        eval set -- "$line"
        local cmd=$1;   shift
        case "$cmd" in
            h|help)  printf "%s\n" "$interactive_command_help" ;;
            q)  printf "\n"
                return 
                ;;
            "") continue            ;;
            r)  ;;
            :*) eval "${cmd#:}" "$@"
                ;;
            *)  $func "$cmd" "$@"
        esac

        eval "
        case \"\$cmd\" in
            r)                  ;;
            $reload_function)           ;;  
            *)      continue            ;;
        esac
        " 2>/dev/null

        s="$(${func}_ls $kw)"   # TODO: figure out why ${kw+"${kw}"} fails
        printf "%s" "$s" | "${func}_ls_format"
    done
}

# shellcheck disable=SC2120
_ali_keypair_quick_title(){
    s=$(ali_keypair_ls "$@")
    printf "%s" "$s" | ali_keypair_ls_format

    cat <<A

Commands:
    i|import        i <keypair-name> <the name of ssh-keypair under ~/.ssh/ folder, or public key body>      
    del             Format: del <part of the vpc's name or id>
    create          Format: create [ --name <vpc name> ]
    r               reload
    q               quit
    :               : <cmd> [ ... <args> ]
A
}

ali_keypair_quick(){
    if [ ! -t 1 ]; then
        ali_keypair_ls "$@"
        return
    fi

    local s
    _ali_keypair_quick_title

    local line
    while printf "ali kp> " && ali_read line; do
        eval set -- "$line"
        local cmd=$1;   shift
        case "$cmd" in
            q)  printf "\n"
                return 
                ;;
            :*) eval "$@"
                ;;
            *)  ali keypair "$cmd" "$@"
        esac

        case "$cmd" in
            r|create|del|import|i)      _ali_keypair_quick_title ;;
        esac
    done
    
}
