# shellcheck shell=sh disable=SC3043

ali_sg_rule(){
    param <<A
subcommand:
    ls              "list security group rules"
    add             "add rule"
    del             "delete rules"
A

    if [ -z "$PARAM_SUBCMD" ]; then
        ali_sg_quick "$@"
        return
    fi

    "ali_sg_rule_$PARAM_SUBCMD" "$@"
}

# shellcheck disable=SC2120
ali_sg_rule_ls(){
    local id
    if ! id=$(ali_sg_exact_id "${1:?Provide rule regex}"); then
        return
    fi

    case $# in
        1)  aliyun ecs DescribeSecurityGroupAttribute --SecurityGroupId "$id" | jq .Permissions.Permission
            ;;
        *)  local regex="${2:-Provide regex pattern}"
            ali_sg_rule_ls "$1" | jq "
                .[] | 
                if .Description | test(\"$regex\")      then .
                elif .Priority == $regex                then .
                else empty end
            " | jq -s .
            ;;
    esac
}

# ali_sg_rule_exact_id(){
#     ali_sg_rule_exact | jq -r .SecurityGroupIds
# }

# ali_sg_rule_exact(){
#     local s
#     s="$(ali_sg_rule_ls "${1:-Provide ip}")"
#     local len
#     len="$(echo "$s" | jq ' . | length ')"
#     case $len in
#         0)  ali_log warn "No such security group rule found.";;
#         1)  printf "%s" "$s" | jq -r .[0]
#             return 0
#             ;;
#         *)  ali_log warn "Multiple security group found.";;
#     esac
#     return 1
# }

ali_sg_rule_del(){
    local item
    if item=$(ali_sg_rule_exact "${1:?Provide rule regex}" ); then
        printf "%s" "$item" | jq -r .SecurityGroupIds
    fi
}


# TCP|80-91||intranet|accept|ip|src-ip|
# TCP|80-91||intranet|accept|ip|src-group-ip|
# TCP|80-91||intranet|accept|ip|src-prefix-ip|

# TCP|80-91||intranet||0.0.0.0/0|accept|1

# TCP|80-91|src-ip|intranet||0.0.0.0/0|accept|1
# TCP|80-91|src-group-ip|intranet||0.0.0.0/0|accept|1
# TCP|80-91|src-prefix-ip|intranet||0.0.0.0/0|accept|1


# TCP|24|0.0.0.0/0|ACCEPT|HIGH

# ali sg rule add egree "intranet|TCP|80-91|src-prefix-ip||0.0.0.0/0|accept|1"
# ali sg rule del egree "intranet|TCP|80-91|src-prefix-ip||0.0.0.0/0|accept|1"

# ali_sg_rule_parsing "intranet|TCP|80-91|src-prefix-ip||0.0.0.0/0|accept|1"

ali_sg_rule_parsing(){
    echo "${1:-Provide}" | awk -v FS='|' '
function pprint(name, val){
    if (val == "") return
    printf("%s %s ", name, val)
}
    
{
  
    pprint("--NicType",         $1)
    pprint("--IpProtocol",      $2)
    pprint("--PortRange",       $3)
    pprint("--DestCidrIp",      $4)
    pprint("--SourcePortRange", $5)
    pprint("--SourceCidrIp",    $6)
    pprint("--Policy",          $7)
    pprint("--Priority",        $8)
}'
}

ali_sg_rule_add_ingress(){
    eval aliyun ecs AuthorizeSecurityGroup \
        "$(ali_sg_rule_parsing "${1:?Provide rule string}")"
}

ali_sg_rule_add_egress(){
    eval aliyun ecs AuthorizeSecurityGroupEgress \
        "$(ali_sg_rule_parsing "${1:?Provide rule string}")"
}

ali_sg_rule_rm_ingress(){
    eval aliyun ecs RevokeSecurityGroup \
        "$(ali_sg_rule_parsing "${1:?Provide rule string}")"
}

ali_sg_rule_rm_egress(){
    eval aliyun ecs RevokeSecurityGroupEgress \
        "$(ali_sg_rule_parsing "${1:?Provide rule string}")"
}




# ali_sg_rule_add_ingress(){
#     param <<A
# options:
#     --protocol|-p           "Protocol"      <protocol>=all      =   tcp udp icmp gre all
#     --range|-r              "port range"    <port-rage>=""      
#     --drop|-D               "set to drop"
#     --priority              "priority"      <priority>=1
#     --desc|--description    "description"   <description>=""
# A

#     local policy=accept
#     [ -n "$drop" ] && printf "drop"

    # aliyun ecs AuthorizeSecurityGroup \
    #     --IpProtocol "${protocol}" \
    #     --PortRange "${range}" \
    #     --Policy "$policy" \
    #     --Description "$description" \
    #     --Priority "${proity}"

# }


# ali_sg_rule_add_egress(){

#     param <<A
# options:
#     --protocol|-p           "Protocol"      <protocol>=all      =   tcp udp icmp gre all
#     --range|-r              "port range"    <port-rage>=""      
#     --drop|-D               "set to drop"
#     --priority              "priority"      <priority>=1
#     --desc|--description    "description"   <description>=""
# A

#     local policy=accept
#     [ -n "$drop" ] && printf "drop"

#     aliyun ecs AuthorizeSecurityGroupEgress \
#         --IpProtocol "${protocol}" \
#         --PortRange "${range}" \
#         --Policy "$policy" \
#         --Description "$description" \
#         --Priority "${proity}"
# }

ali_sg_rule_remove_ingress(){
    :
}

